spring:
  application:
    name: dispatcher-service
  config:
    import: "optional:configserver:"
  cloud:
    function:
      # 定义Spring Cloud Function管理的函数，此处用'|'将两个函数组合，否则用';'分隔
      definition: pack|label
    stream:
      # 交换机和队列，由框架自动创建
      bindings:
        # 输入绑定
        packlabel-in-0:
          # 在代理中，绑定器实际绑定的名称，即交换机：order-accepted，队列名：order-accepted.dispatcher-service
          destination: order-accepted
          # 对目的地感兴趣的消费者组，队列名策略<destination>.<group>
          group: ${spring.application.name}
        # 输出绑定
        packlabel-out-0:
          destination: order-dispatched
    config:
      uri: http://localhost:8888
      request-connect-timeout: 5000
      request-read-timeout: 5000
      fail-fast: false
      retry:
        max-attempts: 3
        initial-interval: 1000
        max-interval: 2000
        multiplier: 1.1
  # rabbitmq配置
  rabbitmq:
    host: localhost
    port: 5672
    username: user
    password: password
    connection-timeout: 5s

management:
  endpoints:
    web:
      exposure:
        # 通过http暴露/actuator/health端点
        include: health, prometheus
  endpoint:
    health:
      # 始终展示应用详情和组件详情
      show-details: always
      show-components: always
      probes:
        # 启用对健康探针的支持
        enabled: true
  metrics:
    tags:
      # 添加带有应用名称的Micrometer通用标签，这会将一个Prometheus标记应用到所有度量中
      application: ${spring.application.name}

server:
  port: 9003
